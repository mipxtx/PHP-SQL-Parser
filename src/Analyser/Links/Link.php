<?php

namespace Analyser\Links;

class Link extends AbstractItem
{

    private $context, $linkType, $to;


    /**
     * @param $root
     * @param $linkType
     * @param $to
     */
    public function __construct(Context $context, $linkType, $to)
    {
        $this->context = $context;
        $this->linkType = $linkType;
        $this->to = trim(str_replace(["[","]"],"",$to));
    }

    public function getSysName($sname)
    {
        $sname = parent::getSysName($sname);
        return $sname; // TODO: Change the autogenerated stub
    }

    public function getFrom(){
        return $this->context->getRoot()->getName();
    }

    public function generate(): string
    {
        $from = $this->getSysName($this->getFrom());

        $to = $this->context->resolve($this->to);
        $to = $this->context->resolve($to);

        if($this->skipName($to)){
            return "";
        }

        $to = $this->getSysName($to);

        switch ($this->linkType) {
            case 'triggers':
            case 'insert':
            case 'replace':
            case 'update':
            case 'delete':
            case 'select':
            case 'exec':
            case 'syn' :
            case 'receive' :
            case 'conversation' :
//            case 'declare':
                return "{$this->linkType}({$from}, {$to})";
            case "type" :
                return "";
            default:
                throw new \Exception("unknown link type {$this->linkType}");
        }


    }

    public function getName(): string
    {
        return $this->getSysName($this->getFrom());
    }
}